<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Grouping_Text0" xml:space="preserve">
    <value>このサンプルでは、グループ化された MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a grouping mvc flexgrid to excel file.</comment>
  </data>
  <data name="Paging_Text0" xml:space="preserve">
    <value>このサンプルでは、ページ区切り付き MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a paged mvc FlexGrid to excel file.</comment>
  </data>
  <data name="VirtualScrolling_Text0" xml:space="preserve">
    <value>このサンプルでは、仮想スクロールする MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a virtual scrolling mvc FlexGrid to excel file.</comment>
  </data>
  <data name="ConditionalStyling_Text0" xml:space="preserve">
    <value>このサンプルでは、書式設定セルを含む MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a mvc flexgrid with format cells to excel file.</comment>
  </data>
  <data name="DisableServerRead_Text0" xml:space="preserve">
    <value>このサンプルでは、&lt;b&gt;DisableServerRead&lt;/b&gt; プロパティを使用して MVC FlexGrid を Excel にエクスポートする方法を示します。
    このプロパティを True に設定した場合は、すべての項目がクライアント側に転送されます。したがって、クライアントですべてのデータと共に現在の FlexGrid がエクスポートされます。
    そうでない場合は、最初にサーバー側でデータを取得し、すべてのデータと共に FlexGrid が Excel ファイルにエクスポートされます。</value>
    <comment>This sample shows how to export mvc flexgrid to excel with the &lt;b&gt;DisableServerRead&lt;/b&gt; property. 
    When it is set to True, all the items will be transferred to the client side. So it just exports the current flexgrid with all the data in client.
    Otherwise, will obtain the data from server side first, then export the flexgrid with all data to excel file.</comment>
  </data>
  <data name="Filtering_Text0" xml:space="preserve">
    <value>このサンプルでは、フィルタ処理された MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a filtering mvc flexgrid to excel file.</comment>
  </data>
  <data name="FrozenCells_Text0" xml:space="preserve">
    <value>このサンプルでは、固定セルを含む MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a mvc flexgrid with frozen cells to excel file.</comment>
  </data>
  <data name="Index_Text0" xml:space="preserve">
    <value>このサンプルでは、MVC FlexGrid をエクスポートおよびインポートする方法を示します。</value>
    <comment>This sample demonstrates how to export and import a mvc flexgrid.</comment>
  </data>
  <data name="RemoteBind_Text0" xml:space="preserve">
    <value>このサンプルでは、何らかのアクションから取得したデータを含む MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a mvc flexgrid with the data from some action to excel file.</comment>
  </data>
  <data name="TreeView_Text0" xml:space="preserve">
    <value>このサンプルでは、階層化データに連結された MVC FlexGrid を Excel ファイルにエクスポートする方法を示します。</value>
    <comment>This sample demonstrates how to export a mvc flexgrid bound with hierarchical data to excel file.</comment>
  </data>
  <data name="TreeView_Text1" xml:space="preserve">
    <value>このサンプルプロジェクトのファイル構造</value>
    <comment>The file structure of this sample project</comment>
  </data>
</root>