@model WebApiExplorer.Models.GridExportImportOptions
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    var controllerName = ViewContext.RouteData.Values["controller"].ToString();
    var isMVCControl = controllerName.StartsWith("MVC");
    var exporter = isMVCControl ? "c1.mvc.grid.ExcelExporter" : "wijmo.grid.ExcelExporter";
    var importer = "wijmo.grid.ExcelImporter";
    var title = string.Empty;
    var format = new List<string> {
#if NET20
        "Xlsx","Xls","Csv"
#else
        "Xlsx","Csv"
#endif
    };
    if (Model.NeedExport)
    {
        title = Resource.FlexGridOptions_Export;
    }
    if (Model.NeedImport)
    {
        if (string.IsNullOrEmpty(title))
        {
            title = Resource.FlexGridOptions_Import;
        }
        else
        {
            title = Resource.FlexGridOptions_ExportImport;
        }
    }
}

<script>
    var format = "Xlsx", onlyCurrentPage = @(Convert.ToString(Model.OnlyCurrentPage == true ? true : false).ToLower()),
        includeColumnHeaders = @(Convert.ToString(Model.IncludeColumnHeaders == true ? true : false).ToLower()),
        serverUrl = '@(Configuration["WebAPIService"])';

    function onlyCurrentPageChanged(arg) {
        onlyCurrentPage = arg;
        wijmo.Control.getControl("#onlyCurrentPageMenu").header = "@(Resource.FlexGridOptions_OnlyCurrentPage) <b>" + (arg ? "True" : "False") +"</b>";
    }

    function includeColumnHeadersChanged(arg) {
        var headerText = arg ? "True" : "False";
        includeColumnHeaders = arg;
        wijmo.Control.getControl("#includeColumnHeadersMenu").header = "@(Resource.FlexGridOptions_IncludeColumnHeaders) <b>" + (arg ? "True" : "False") +"</b>";
    }

    function exportControl@(Model.ControlId)() {
        var exporter = new @(exporter)(),
            control = wijmo.Control.getControl("#@(Model.ControlId)");
        exporter.requestExport(control, serverUrl + "api/export/excel", {
            fileName: document.getElementById("exportName").value,
            type: format,
            onlyCurrentPage: onlyCurrentPage,
            includeColumnHeaders: includeColumnHeaders
        });
    }

    function importControl@(Model.ControlId)() {
        var file = document.getElementById("fileinput").files[0],
            exporter;
        if (!file) {
            return;
        }
        exporter = new @(importer)();
        if (@isMVCControl.ToString().ToLower()) {
            grid = wijmo.Control.getControl("#@(Model.ControlId)");
        }

        exporter.requestImport(grid, serverUrl + "api/import/excel", file, includeColumnHeaders);
    };

    function exportFormatChanged(arg) {
        format = arg;
        wijmo.Control.getControl("#exportFormat").header = "@(Resource.FlexGridOptions_ExportFormat) <b>" + arg.toUpperCase() + "</b>";
    }
</script>
<div>

</div>
<br />
<div>
    <div class="export-panel">
        <div class="export-panel-title">
            @title
        </div>
        <div class="export-panel-content">
            @if (Model.OnlyCurrentPage != null)
            {
                <c1-menu id="onlyCurrentPageMenu" header="@(Resource.FlexGridOptions_OnlyCurrentPage + " <b>" + (Model.OnlyCurrentPage == true ? "True" : "False") + "</b>")" execute-command="onlyCurrentPageChanged">
                    <c1-menu-item header="True" command-parameter="true"></c1-menu-item>
                    <c1-menu-item header="False" command-parameter="false"></c1-menu-item>
                </c1-menu>
            }
            @if (Model.IncludeColumnHeaders != null)
            {
                <c1-menu id="includeColumnHeadersMenu" header="@(Resource.FlexGridOptions_IncludeColumnHeaders + " <b>" + (Model.IncludeColumnHeaders == true ? "True" : "False") + "</b>")" execute-command="includeColumnHeadersChanged">
                    <c1-menu-item header="True" command-parameter="true"></c1-menu-item>
                    <c1-menu-item header="False" command-parameter="false"></c1-menu-item>
                </c1-menu>
            }
            @if (Model.NeedExport)
            {
#if NET20
                <c1-menu id="exportFormat" header="@(Resource.FlexGridOptions_ExportFormat + " <b>XLSX</b>")" execute-command="exportFormatChanged">
                    <c1-menu-item header="XLSX" command-parameter="format[0]"></c1-menu-item>
                    <c1-menu-item header="XLS" command-parameter="format[1]"></c1-menu-item>
                    <c1-menu-item header="CSV" command-parameter="format[2]"></c1-menu-item>
                </c1-menu>
#else
                <c1-menu id="exportFormat" header="@(Resource.FlexGridOptions_ExportFormat + " <b>XLSX</b>")" execute-command="exportFormatChanged">
                    <c1-menu-item header="XLSX" command-parameter="format[0]"></c1-menu-item>
                    <c1-menu-item header="CSV" command-parameter="format[1]"></c1-menu-item>
                </c1-menu>
#endif
                <span>@Html.Raw(Resource.FlexGridOptions_ExportName) </span><input id="exportName" type="text" class="input-control" value="export" />
                <button class="btn btn-primary" onclick="exportControl@(Model.ControlId)()">@Html.Raw(Resource.FlexGridOptions_ExportText)</button>
            }
            @if (Model.NeedExport && Model.NeedImport)
            {
                @:&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;
            }
            @if (Model.NeedImport)
            {
                <input type="file" id="fileinput" class="btn" style="height:auto;" />
                <button class="btn btn-primary" onclick="importControl@(Model.ControlId)()">@Html.Raw(Resource.FlexGridOptions_ImportText)</button>
            }
        </div>
    </div>
</div>