<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Barcode_Text1" xml:space="preserve">
    <value>各種の標準&lt;a href=\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/GenerateBarcode.html\"&gt;エンコーディングタイプ&lt;/a&gt;を使用し、（指定された）テキストに基づいて、C1 でサポートされるスキャン可能なバーコードをオンザフライで作成します。これによって取得されたバーコードは、画像またはストリームとして保存できます。</value>
    <comment>Generate scannable C1 supported barcode on the fly from the (given) text, in/using a variety of standard &lt;a href=\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/GenerateBarcode.html\"&gt;encoding types&lt;/a&gt;. The barcode so obtained can then be saved as image or stream.</comment>
  </data>
  <data name="Barcode_Text2" xml:space="preserve">
    <value>たとえば、バーコードを PDF ドキュメントまたはフォームで使用したいとします。この場合は、バーコード化するテキストとバーコードタイプを単純なクライアントアプリケーションを通して提供するだけで済みます。クライアントアプリケーションが GET 要求を REST API サービスに送ると、REST API は応答として生成したバーコードを画像ストリームで返します。バーコードサービスでは、バーコードの画像を PNG、JPEG、BMP、GIF、TIFF の各画像形式で保存できます。取得したバーコード画像は、PDF や他のドキュメント、フォーム、データベース、ID カードなどに埋め込んだり使用することができます。</value>
    <comment>Let's say you want to use barcode in PDF document or a form. You simply need to provide the desired text to be barcoded and the barcode type through your simple client application. The client application sends a GET request to the REST API service, which returns the generated barcode in response as an image stream. Barcode service lets you save the barcode image to PNG, JPEG, BMP, GIF, or TIFF image formats. Embed/ use the obtained barcode image in PDF or other documents, forms, databases, ID cards and more.</comment>
  </data>
  <data name="DataEngine_Text1" xml:space="preserve">
    <value>DataEngine は、SQL Server、他の SQL ベースの RDMS サーバー、NoSQL サービス、Web サービス、ファイル/ネットワークシステムの構造化ファイルなどのさまざまなデータソースのデータを分析できる一連の API を提供します。集計データは、他のコントロールやアプリケーションで使用することができます。</value>
    <comment>DataEngine provides a suite of APIs that allow the user to analyze data from multiple data sources, including SQL Server, other SQL based RDMS servers, NoSQL service, web service, structured files from file/network systems, and more. The aggregating data can be consumed by other controls or application.</comment>
  </data>
  <data name="DataEngine_Text2" xml:space="preserve">
    <value>DataEngine Web API では、多くのオープンソース商用分析データベースおよびライブラリで広く使用されている列指向のデータモデルが使用されます。Data Engine では、最大 100 万件のレコードを数分の 1 秒で処理できます。集計データは Web API から取得されます。クライアントアプリケーションはシンプルです。クライアントアプリケーションは、対応するクエリーを何らかの形式でサーバーに送信してデータを取得するだけです。Data Engine サービスについては、&lt;a href =\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/data-engine.html\"&gt;データエンジンサービスの設定&lt;/a&gt; を参照してください。</value>
    <comment>DataEngine Web API uses a column - oriented data model which is widely used in many open source and commercial analytical databases and libraries. Data Engine can handle up to million records in a fraction of a second. The aggregated data is fetched from the Web API, the client application is simple, and it only sends the corresponding query to the server with some format to fetch the data. For more information about Data Engine services, see &lt;a href =\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/data-engine.html\"&gt;Configuring Data Engine Services&lt;/a&gt;.</comment>
  </data>
  <data name="DataEngine_Text3" xml:space="preserve">
    <value>このサービスは、次のデータソースを公開します。</value>
    <comment>This service exposes the following data sources:</comment>
  </data>
  <data name="DataEngine_Title1" xml:space="preserve">
    <value>データソース</value>
    <comment>Data Sources</comment>
  </data>
  <data name="Excel_Text1" xml:space="preserve">
    <value>Web API Edition は、MVC コントロールと Wijmo 5 コントロールをインポートおよびエクスポートする Excel サービスを提供します。また、Excel ファイルを生成および結合する REST API サービスを提供します。</value>
    <comment>Web API Studio Edition provides excel services for- import and export of MVC and Wijmo 5 controls, and REST API services to generate and merge excel files.</comment>
  </data>
  <data name="Excel_Text2" xml:space="preserve">
    <value>Web API Edition には、Excel ファイルのエクスポート/インポート機能を提供する HTTP 要求メッセージが含まれています。GET メソッドと POST メソッドも、Excel ファイルの生成と結合に役立ちます。Web API Edition は、Visual Studio 上で Web API サービスを作成するための Visual Studio テンプレートとして使用できます。作成したサービスは、クライアントアプリケーションで、FlexGrid および Excel データのエクスポート/インポートや、Excel ファイルの生成/結合に使用できます。</value>
    <comment>nside Web API Edition, you will find HTTP request messages which provide export and import functionalities for Excel files. Also, GET and POST methods aid in generating and merging excel files. Available as Visual Studio template, Web API Edition enables you to create Web API service on Visual Studio. This service can then be consumed by client applications to export/import FlexGrid and Excel data, and generate and merge excel files.</comment>
  </data>
  <data name="Excel_Text3" xml:space="preserve">
    <value>これは以下のサービスを提供します。</value>
    <comment>It provided the following services:</comment>
  </data>
  <data name="FlexReports" xml:space="preserve">
    <value>FlexReports</value>
    <comment>FlexReports</comment>
  </data>
  <data name="Image_Text1" xml:space="preserve">
    <value>Web API Edition は、MVC および Wijmo 5 コントロールの画像エクスポートサービスをサポートしています。C1 Web API は、Visual Studio 上で Web API サービスを作成するための Visual Studio テンプレートとして使用できます。クライアントアプリケーションは、Web API サービスアプリケーションに要求を送信して、MVC および Wijmo 5 コントロールを画像としてエクスポートできます。このサービスは、PNG、JPG、BMP、TIFF、および GIFF &lt;a href=\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/overview.html\"&gt;形式&lt;/a&gt;への画像エクスポートをサポートしています。</value>
    <comment>Web API Studio Edition supports image export services for MVC and Wijmo 5 controls. Available as Visual Studio template, C1 Web API enables you to create Web API service on Visual Studio. Client applications then send a request to the Web API service application to export MVC and Wijmo 5 controls as an image. The service supports image export to PNG, JPG, BMP, TIFF, and GIFF &lt;a href=\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/overview.html\"&gt;formats&lt;/a&gt;.</comment>
  </data>
  <data name="Image_Text2" xml:space="preserve">
    <value>画像サービスを使用して MVC または Wijmo5 コントロールをエクスポートする場合は、サービスアプリケーションに phantomjs.exe ファイルを追加する必要があります。詳細については、&lt;a href=\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/overview.html\"&gt;Visual Studio アプリケーションに phantomjs を追加する方法&lt;/a&gt;を参照してください。</value>
    <comment>While you are working with the image services for exporting MVC or Wijmo5 controls, you need to add phantomjs.exe file to your service application. For more information, see &lt;a href=\"https://developer.mescius.com/componentone/docs/webapi/online-webapicore/overview.html\"&gt;How to add phantomjs in your Visual Studio application&lt;/a&gt;.</comment>
  </data>
  <data name="PdfFiles" xml:space="preserve">
    <value>PDF ファイル</value>
    <comment>PDF Files</comment>
  </data>
  <data name="Pdf_Text1" xml:space="preserve">
    <value>Web API Edition では、さまざまな HTTP サービスを構築できる PDFDocument サービスが導入されています。構築された HTTP サービスは、さまざまなクライアントが PDF ドキュメントを表示、ロード、およびキャッシュするために利用できます。これらは REST ベースの API サービスです。HTML 5 PDFViewer コントロールと通信して、Web 上にある PDF ドキュメントを表示します。</value>
    <comment>Web API Studio Edition introduces PDFDocument Services that enables you to build HTTP services, which can be consumed by a variety of clients for viewing, loading and caching PDF documents. These are REST based API services, which communicate with HTML 5 PDFViewer control to display the PDF documents on the web.</comment>
  </data>
  <data name="Pdf_Text2" xml:space="preserve">
    <value>C1 Web API は Visual Studio テンプレートとして提供され、Visual Studio 上で PDFDocument サービスを作成するために使用できます。クライアントアプリケーションは、PDFDocument サービスアプリケーションに要求を送信して、PDF ファイルをロードまたはエクスポートします。このサービスは、HTML および画像形式への PDF ファイルの保存をサポートしています。</value>
    <comment>Available as Visual Studio template, C1 Web API enables you to create PDFDocument service on Visual Studio. Client applications send a request to the PDFDocument service applications to load or export PDF files. The service supports saving your pdf files to Html and Image.</comment>
  </data>
  <data name="Report_Text1" xml:space="preserve">
    <value>Web API Edition では、さまざまな HTTP サービスを構築できるレポートサービスをリリース/導入しています。構築された HTTP サービスは、さまざまなクライアントが FlexReports および SSRS レポートを表示、ロード、およびキャッシュするために利用できます。これらは REST ベースの API サービスです。HTML 5 ReportViewer コントロールと通信して、Web 上にあるレポートコンテンツを表示します。HTML5 ベースの ReportViewer コントロールで、さまざまなレポート（主に FlexReport および SSRS レポート）を表示できます。</value>
    <comment>Web API Studio Edition releases/ introduces Report Services that enables you to build HTTP services, which can be consumed by a variety of clients for viewing, loading and caching FlexReports and SSRS reports. These are REST based API services, which communicate with HTML 5 ReportViewer control to display the report content on the web. You can view a variety of reports in the HTML5 based ReportViewer control, mainly FlexReport and SSRS reports.</comment>
  </data>
  <data name="Report_Text2" xml:space="preserve">
    <value>C1 Web API は Visual Studio テンプレートとして提供され、Visual Studio 上でレポートサービスを作成するために使用できます。クライアントアプリケーションは、レポートサービスアプリケーションに要求を送信して、レポートをロード/エクスポートしたり、ユーザーがレポートでパラメータを使用できるようにします。このサービスは、PDF、Excel、HTML、RTF、OpenXML、および画像形式へのレポートのエクスポートをサポートしています。</value>
    <comment>Available as Visual Studio template, C1 Web API enables you to create reporting services on Visual Studio. Client applications send a request to the report service applications to load reports, export reports, and allow users to use parameters in the report. The service supports exporting your reports to PDF, Excel, HTML, RTF, OpenXML, and Image.</comment>
  </data>
  <data name="Report_Text3" xml:space="preserve">
    <value>レポート</value>
    <comment>Reports</comment>
  </data>
  <data name="Report_Text4" xml:space="preserve">
    <value>このサービスは、次のレポートファイルを公開します。</value>
    <comment>This service exposes the following report files:</comment>
  </data>
  <data name="SSRSReports" xml:space="preserve">
    <value>SSRS レポート</value>
    <comment>SSRS Reports</comment>
  </data>
</root>